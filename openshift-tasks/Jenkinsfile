#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  podRetention: always(),
  idleMinutes: 20,
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"
    def sonarUrl = "http://sonarqube-user4-sonarqube.apps.2b0b.openshift.opentlc.com"
    if (GUID == 'aaaa') {
      mvnCmd = "mvn -s ../aaaa_nexus_settings.xml"
      sonarUrl = "http://sonarqube-huub-sonarqube.apps.box.it-speeltuin.nl"
    }


    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // TBD Set the tag for the development image: version + build number
      def devTag  = version + "-" + BUILD_ID
      // Set the tag for the production image: version
      def prodTag = ""

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        // TBD: Execute Maven Build

        sh "${mvnCmd} package -DskipTests"
      }



      // TBD: The next two stages should run in parallel
      stage('Run Tests') {
        parallel 'Unit tests': {
          // Using Maven run the unit tests
            echo "Running Unit Tests"
            
            // TBD: Execute Unit Tests
            sh "${mvnCmd} test"
          }, 'Code Analysis': {
          
          // Using Maven to call SonarQube for Code Analysis

            echo "Running Code Analysis"
            
            // TBD: Execute Sonarqube Tests
            sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${sonarUrl} -Dsonar.exclusions=**/*.css,**/*.js -Dsonar.projectName=${JOB_BASE_NAME} -Dsonar.projectVersion=${devTag}"
          },
        failFast: true
        }
      
        
      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        // TBD: Publish to Nexus
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        // TBD: Build Image, tag Image
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // TBD: Deploy to development Project
        //      Set Image, Set VERSION
        //      Make sure the application is running and ready before proceeding
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        // TBD: Copy image to Nexus container registry

        // TBD: Tag the built image with the production tag.
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        // TBD: Execute switch
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
